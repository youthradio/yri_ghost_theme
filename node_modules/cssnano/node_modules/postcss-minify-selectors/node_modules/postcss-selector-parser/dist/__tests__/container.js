'use strict';

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _tape = require('tape');

var _tape2 = _interopRequireDefault(_tape);

var _utilHelpers = require('./util/helpers');

(0, _tape2['default'])('container#each', function (t) {
    t.plan(1);
    var str = '';
    (0, _utilHelpers.parse)('h1, h2:not(h3, h4)', function (selectors) {
        selectors.each(function (selector) {
            if (selector.first.type === 'tag') {
                str += selector.first.value;
            }
        });
    });
    t.equal(str, 'h1h2');
});

(0, _tape2['default'])('container#eachInside', function (t) {
    t.plan(1);
    var str = '';
    (0, _utilHelpers.parse)('h1, h2:not(h3, h4)', function (selectors) {
        selectors.eachInside(function (selector) {
            if (selector.type === 'tag') {
                str += selector.value;
            }
        });
    });
    t.equal(str, 'h1h2h3h4');
});

(0, _tape2['default'])('container#eachInside (safe iteration)', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('[class] + *[href] *:not(*.green)', function (selectors) {
        selectors.eachUniversal(function (selector) {
            var next = selector.next();
            if (next && next.type !== 'combinator') {
                selector.removeSelf();
            }
        });
    });
    t.equal(out, '[class] + [href] :not(.green)');
});

(0, _tape2['default'])('container#eachAttribute', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('[href][class].class', function (selectors) {
        selectors.eachAttribute(function (attr) {
            if (attr.attribute === 'class') {
                attr.removeSelf();
            }
        });
    });
    t.equal(out, '[href].class');
});

(0, _tape2['default'])('container#eachClass', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('.one, .two, .three:not(.four, .five)', function (selectors) {
        selectors.eachClass(function (className) {
            className.value = className.value.slice(0, 1);
        });
    });
    t.equal(out, '.o, .t, .t:not(.f, .f)');
});

(0, _tape2['default'])('container#eachCombinator', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('h1 h2 h3 h4', function (selectors) {
        selectors.eachCombinator(function (comment) {
            comment.removeSelf();
        });
    });
    t.equal(out, 'h1h2h3h4');
});

(0, _tape2['default'])('container#eachComment', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('.one/*test*/.two', function (selectors) {
        selectors.eachComment(function (comment) {
            comment.removeSelf();
        });
    });
    t.equal(out, '.one.two');
});

(0, _tape2['default'])('container#eachId', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('h1#one, h2#two', function (selectors) {
        selectors.eachId(function (id) {
            id.value = id.value.slice(0, 1);
        });
    });
    t.equal(out, 'h1#o, h2#t');
});

(0, _tape2['default'])('container#eachPseudo', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('a:before, a:after', function (selectors) {
        selectors.eachPseudo(function (pseudo) {
            pseudo.value = pseudo.value.slice(0, 2);
        });
    });
    t.equal(out, 'a:b, a:a');
});

(0, _tape2['default'])('container#eachTag', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('1 2 3', function (selectors) {
        selectors.eachTag(function (tag) {
            tag.value = 'h' + tag.value;
        });
    });
    t.equal(out, 'h1 h2 h3');
});

(0, _tape2['default'])('container#eachUniversal', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('*.class,*.class,*.class', function (selectors) {
        selectors.eachUniversal(function (universal) {
            universal.removeSelf();
        });
    });
    t.equal(out, '.class,.class,.class');
});

(0, _tape2['default'])('container#map', function (t) {
    t.plan(1);
    (0, _utilHelpers.parse)('1 2 3', function (selectors) {
        var arr = selectors.first.map(function (selector) {
            if (/[0-9]/.test(selector.value)) {
                return 'h' + selector.value;
            }
            return selector.value;
        });
        t.deepEqual(arr, ['h1', ' ', 'h2', ' ', 'h3']);
    });
});

(0, _tape2['default'])('container#every', function (t) {
    t.plan(1);
    (0, _utilHelpers.parse)('.one.two.three', function (selectors) {
        var allClasses = selectors.first.every(function (selector) {
            return selector.type = 'class';
        });
        t.ok(allClasses);
    });
});

(0, _tape2['default'])('container#some', function (t) {
    t.plan(1);
    (0, _utilHelpers.parse)('one#two.three', function (selectors) {
        var someClasses = selectors.first.some(function (selector) {
            return selector.type = 'class';
        });
        t.ok(someClasses);
    });
});

(0, _tape2['default'])('container#reduce', function (t) {
    t.plan(1);
    (0, _utilHelpers.parse)('h1, h2, h3, h4', function (selectors) {
        var str = selectors.reduce(function (memo, selector) {
            if (selector.first.type === 'tag') {
                memo += selector.first.value;
            }
            return memo;
        }, '');
        t.equal(str, 'h1h2h3h4');
    });
});

(0, _tape2['default'])('container#filter', function (t) {
    t.plan(1);
    (0, _utilHelpers.parse)('h1, h2, c1, c2', function (selectors) {
        var ast = selectors.filter(function (selector) {
            return ~selector.first.value.indexOf('h');
        });
        t.equal(String(ast), 'h1, h2');
    });
});

(0, _tape2['default'])('container#split', function (t) {
    t.plan(2);
    (0, _utilHelpers.parse)('h1 h2 >> h3', function (selectors) {
        var list = selectors.first.split(function (selector) {
            return selector.value === '>>';
        }).map(function (group) {
            return group.map(String);
        });
        t.deepEqual(list, [['h1', ' ', 'h2', ' >> '], ['h3']]);
        t.equal(list.length, 2);
    });
});

(0, _tape2['default'])('container#sort', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('h2,h3,h1,h4', function (selectors) {
        selectors.sort(function (a, b) {
            return a.first.value.slice(-1) - b.first.value.slice(-1);
        });
    });
    t.equal(out, 'h1,h2,h3,h4');
});

(0, _tape2['default'])('container#at', function (t) {
    t.plan(1);
    (0, _utilHelpers.parse)('h1, h2, h3', function (selectors) {
        t.equal(selectors.at(1).first.value, 'h2');
    });
});

(0, _tape2['default'])('container#first, container#last', function (t) {
    t.plan(2);
    (0, _utilHelpers.parse)('h1, h2, h3, h4', function (selectors) {
        t.equal(selectors.first.first.value, 'h1');
        t.equal(selectors.last.last.value, 'h4');
    });
});

(0, _tape2['default'])('container#index', function (t) {
    t.plan(1);
    (0, _utilHelpers.parse)('h1 h2 h3', function (selectors) {
        var middle = selectors.first.at(1);
        t.equal(selectors.first.index(middle), 1);
    });
});

(0, _tape2['default'])('container#length', function (t) {
    t.plan(1);
    (0, _utilHelpers.parse)('h1, h2, h3', function (selectors) {
        t.equal(selectors.length, 3);
    });
});

(0, _tape2['default'])('container#remove', function (t) {
    t.plan(1);
    var out = (0, _utilHelpers.parse)('h1.class h2.class h3.class', function (selectors) {
        selectors.eachInside(function (selector) {
            if (selector.type === 'class') {
                selector.parent.remove(selector);
            }
        });
    });
    t.equal(out, 'h1 h2 h3');
});

(0, _tape2['default'])('container#removeAll, container#empty', function (t) {
    t.plan(2);
    var wipe = function wipe(method) {
        return function (selectors) {
            selectors[method]();
        };
    };
    var out1 = (0, _utilHelpers.parse)('h1 h2, h2 h3, h3 h4', wipe('empty'));
    var out2 = (0, _utilHelpers.parse)('h1 h2, h2 h3, h3 h4', wipe('removeAll'));
    t.equal(out1, '');
    t.equal(out2, '');
});