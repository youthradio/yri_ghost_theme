'use strict';

var _utilHelpers = require('./util/helpers');

(0, _utilHelpers.test)('id selector', '#one', function (t, tree) {
    t.plan(2);
    t.equal(tree.nodes[0].nodes[0].value, 'one');
    t.equal(tree.nodes[0].nodes[0].type, 'id');
});

(0, _utilHelpers.test)('id and class names mixed', '#one.two.three', function (t, tree) {
    t.plan(6);
    t.equal(tree.nodes[0].nodes[0].value, 'one');
    t.equal(tree.nodes[0].nodes[1].value, 'two');
    t.equal(tree.nodes[0].nodes[2].value, 'three');

    t.equal(tree.nodes[0].nodes[0].type, 'id');
    t.equal(tree.nodes[0].nodes[1].type, 'class');
    t.equal(tree.nodes[0].nodes[2].type, 'class');
});

(0, _utilHelpers.test)('qualified id', 'button#one', function (t, tree) {
    t.plan(2);
    t.equal(tree.nodes[0].nodes[0].type, 'tag');
    t.equal(tree.nodes[0].nodes[1].type, 'id');
});

(0, _utilHelpers.test)('qualified id & class name', 'h1#one.two', function (t, tree) {
    t.plan(3);
    t.equal(tree.nodes[0].nodes[0].type, 'tag');
    t.equal(tree.nodes[0].nodes[1].type, 'id');
    t.equal(tree.nodes[0].nodes[2].type, 'class');
});

(0, _utilHelpers.test)('extraneous non-combinating whitespace', '  #h1   ,  #h2   ', function (t, tree) {
    t.plan(6);
    t.equal(tree.nodes[0].nodes[0].value, 'h1');
    t.equal(tree.nodes[0].nodes[0].spaces.before, '  ');
    t.equal(tree.nodes[0].nodes[0].spaces.after, '   ');
    t.equal(tree.nodes[1].nodes[0].value, 'h2');
    t.equal(tree.nodes[1].nodes[0].spaces.before, '  ');
    t.equal(tree.nodes[1].nodes[0].spaces.after, '   ');
});